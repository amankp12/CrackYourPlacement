733. Flood Fill


class Solution {
public:
    
    void dfs(vector<vector<int>>& image, int i, int j,int val, int newColor)
    {
        if(i<0 || i>=image.size() || j<0 || j>= image[0].size() || image[i][j] == newColor || image[i][j] != val)
        {
            return;
        }
        image[i][j] = newColor;
        dfs(image,i-1,j,val,newColor);
        dfs(image,i+1,j,val,newColor);
        dfs(image,i,j-1,val,newColor);
        dfs(image,i,j+1,val,newColor);
    }
    
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor)
    {
        int val = image[sr][sc];
        dfs(image,sr,sc,val,newColor);
        return image;
    }
};


Rat in a Maze Problem - I

class Solution {
  public:
  
  void maze( vector <vector<int> > &arr,int r,int c,int row,int col,string &temp,vector <string> &ans,vector <vector <int> > &visit){
     if(r==row-1 && c==col-1){
        ans.push_back(temp);
        return;
     }


    //up direction
    if(r-1 >=0 && visit[r-1][c] ==0 && arr[r-1][c] == 1){
        visit[r-1][c] = 1;
        temp.push_back('U');
        maze(arr,r-1,c,row,col,temp,ans,visit);
        temp.pop_back();
        visit[r-1][c] = 0;
    }
    //down direction

    if(r+1 <row && visit[r+1][c] ==0 && arr[r+1][c] == 1){
        visit[r+1][c] = 1;
        temp.push_back('D');
        maze(arr,r+1,c,row,col,temp,ans,visit);
        temp.pop_back();
        visit[r+1][c] = 0;
    }
    //left
    if(c-1 >=0 && visit[r][c-1] ==0 && arr[r][c-1] == 1){
        visit[r][c-1] = 1;
        temp.push_back('L');
        maze(arr,r,c-1,row,col,temp,ans,visit);
        temp.pop_back();
        visit[r][c-1] = 0;
    }
    //right
    if(c+1 <col && visit[r][c+1] ==0 && arr[r][c+1] == 1){
        visit[r][c+1] = 1;
        temp.push_back('R');
        maze(arr,r,c+1,row,col,temp,ans,visit);
        temp.pop_back();
        visit[r][c+1] = 0;
    }
}

    vector<string> findPath(vector<vector<int>> &arr) {
    int row = arr.size();
    int col = arr[0].size();
    string temp;
    vector <string> ans;
    vector <vector <int> > visit(row,(vector <int> (col,0)));

    if (arr[0][0] == 1 && arr[row - 1][col - 1] == 1) {
        visit[0][0] = 1;
        maze(arr, 0, 0, row, col, temp, ans, visit);
    }
    
    return ans;
    }
};


Undirected Graph Cycle


class Solution {
  public:
    bool dfs(int u, int parent, vector<int> adj[], vector<bool> &vis, vector<bool> &stk){
        vis[u] = true;
        stk[u] = true;
        
        for(int v : adj[u]){
            if(!vis[v]){
                if(dfs(v,u, adj, vis, stk)) return true;
            }
            else if(stk[v] && parent != v) return true;
        }
        stk[u] = false;
        return false;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        vector<bool> vis(V, false);
        vector<bool> stk(V, false);
        
        for(int i = 0; i < V; i++){
            if(!vis[i]) {
                if(dfs(i,-1, adj, vis, stk))return true;
            }
        }
        return false;
    }
};
