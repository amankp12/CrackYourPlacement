232. Implement Queue using Stacks

class MyQueue {
public:
    stack<int> s1;
    stack<int> s2;
    
    MyQueue() {
        
    }
    
    void push(int x) {
        while(!s1.empty()) {
            s2.push(s1.top());
            s1.pop();
        }
        s2.push(x);
        while(!s2.empty()) {
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    int pop() {
        int curr = s1.top();
        s1.pop();
        return curr;
    }
    
    int peek() {
        return s1.top();
    }
    
    bool empty() {
        return s1.empty();
    }
};



844. Backspace String Compare


class Solution {
public:
    string check(string s){
        stack<char> st;

        for(auto i : s){
            if(i == '#' and !st.empty()){
                st.pop();
            }
            else if(i != '#'){
                st.push(i);
            }
        }

        string res;
        while(!st.empty()){
            res += st.top();
            st.pop();
        }
        reverse(res.begin() , res.end());
        return res;
    }

    bool backspaceCompare(string s, string t) {
        string a = check(s);
        string b = check(t);
        return b==a;
    }
};


225. Implement Stack using Queues


class MyStack {
public:
    queue<int> q1;
    queue<int> q2;

    MyStack() {
        
    }
    
    void push(int x) {
        q2.push(x);
        while(!q1.empty()){
            q2.push(q1.front());
            q1.pop();
        }
        swap(q1,q2);
    }
    
    int pop() {
        int result = top();
        q1.pop();
        return result;
    }
    
    int top() {
        return q1.front();
    }
    
    bool empty() {
        return q1.empty();
    }
};
