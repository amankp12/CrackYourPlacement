621. Task Scheduler


class Solution {
public:
    int leastInterval(vector<char>& tasks, int p) {
        int n = tasks.size();
        unordered_map<char, int> mp;
        
        for(char &ch : tasks) {
            mp[ch]++;
        }

        priority_queue<int> pq; //max heap
        //we want to finish the process which is most occurring (having highest frequency)
        //so that we don't have to finish in the last with p gaps.
        int time = 0;
        
        for(auto &it : mp) {
            pq.push(it.second);
        }
        
        while(!pq.empty()) {
            vector<int> temp;
            for(int i = 1; i<=p+1; i++) {
                //filling first p+1 characters
                if(!pq.empty()) {
                    temp.push_back(pq.top()-1); //finishing one instance of each process
                    pq.pop();
                }
            }
            
            for(int &freq : temp) {
                if(freq > 0)
                    pq.push(freq);
            }
            
            if(pq.empty()) //all processes finished
                time += temp.size();
            else
                time += (p+1); //we finished p+1 tasks above in the loop
        }
        return time;
    }
};


1647. Minimum Deletions to Make Character Frequencies Unique


class Solution {
public:
    int minDeletions(string s) {
        unordered_set<int> st;
        int freq[26] = {0};
      
        for(char &ch : s) {
            freq[ch-'a']++;
        }
        
        int result = 0;
        for(int i = 0; i<26; i++) {
            
            while(freq[i] > 0 && st.find(freq[i]) != st.end()) {
                freq[i]--;
                result++;
            }
            st.insert(freq[i]);
        }
        
        return result;
    }
};


402. Remove K Digits


class Solution {
public:
    string removeKdigits(string num, int k) {
        if(num.length() <= k)
            return "0";

        if(k == 0)
            return num;

        string res = "";
        stack<char> s;
        s.push(num[0]);

        for(int i = 1; i < num.length(); i++){
            while(k > 0 && !s.empty() && num[i] < s.top()){
                k--;
                s.pop();
            }
            s.push(num[i]);

            if(s.size() == 1 && num[i] == '0')
                s.pop();
        }

        while(k && !s.empty()){
            k--;
            s.pop();
        }

        while(!s.empty()){
            res.push_back(s.top());
            s.pop();
        }

        reverse(res.begin(), res.end());

        if(res.length() == 0)
            return "0";

        return res;
    }
};
