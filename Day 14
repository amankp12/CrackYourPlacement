Allocate Minimum Pages


class Solution {
  public:
    bool possible(int v[], long long mid, int member, int n){
    int cnt = 0;
    int running = 0;
    for(int i = 0; i < n; i++){
        running += v[i];
        
        if(running > mid){
            cnt++;
            running = v[i];
        }
    }
    return cnt >= member;
}
    long long findPages(int n, int arr[], int m) {
        long long start = INT_MIN, end = 0;
        if(n < m)
            return -1;
        for(int i = 0; i < n; i++){
            long long v = arr[i];
            start = max(start, v);
            end += v;
        }
        while(start <= end){
            long long mid = start + (end - start) / 2;
            if(possible(arr, mid, m, n))
                start = mid + 1;
            else
                end = mid - 1;
        }
        return start;
    }
};


Minimum Swaps to Sort


class Solution 
{
    public:
    //Function to find the minimum number of swaps required to sort the array. 
    int minSwaps(vector<int>&nums)
    {
        // Code here
        int start=0;
        int end=nums.size()-1;
        int c=0;
        while(start<end)
        {
            if(nums[start]<nums[end])
            {
                start++;
            }
            else
            {
                swap(nums[start],nums[end]);
                c++;
                
                end--;
                
            }
        }
        return c;
    }
};




33. Search in Rotated Sorted Array



class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int low = 0;
        int high = n-1;

        while(low <= high){
            int mid = (low+high)/2;

            if(nums[mid] == target){
                return mid;
            }

            // Identify the sorted half either left or right
            // left sorted
            if(nums[low] <= nums[mid]){
                if(nums[low] <= target && target <= nums[mid]){
                    high = mid - 1;
                }
                else{
                    low = mid + 1;
                }
            }

            //right sorted
            else{
                if(nums[mid] <= target && target <= nums[high]){
                    low = mid + 1;
                }
                else{
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
};


315. Count of Smaller Numbers After Self


class Solution {
protected:
    void merge_countSmaller(vector<int>& indices, int first, int last, 
                            vector<int>& results, vector<int>& nums) {
        int count = last - first;
        if (count > 1) {
            int step = count / 2;
            int mid = first + step;
            merge_countSmaller(indices, first, mid, results, nums);
            merge_countSmaller(indices, mid, last, results, nums);
            vector<int> tmp;
            tmp.reserve(count);
            int idx1 = first;
            int idx2 = mid;
            int semicount = 0;
            while ((idx1 < mid) || (idx2 < last)) {
                if ((idx2 == last) || ((idx1 < mid) &&
                       (nums[indices[idx1]] <= nums[indices[idx2]]))) {
					tmp.push_back(indices[idx1]);
                    results[indices[idx1]] += semicount;
                    ++idx1;
                } else {
					tmp.push_back(indices[idx2]);
                    ++semicount;
                    ++idx2;
                }
            }
            move(tmp.begin(), tmp.end(), indices.begin()+first);
        }
    }
public:
    vector<int> countSmaller(vector<int>& nums) {
        int n = nums.size();
        vector<int> results(n, 0);
        vector<int> indices(n, 0);
        iota(indices.begin(), indices.end(), 0);
        merge_countSmaller(indices, 0, n, results, nums);
        return results;
    }
};


410. Split Array Largest Sum


class Solution {
private:
    bool doable (const vector<int>& nums, int cuts, long long max) {
        int acc = 0;
        for (num : nums) {
            // This step is unnecessary for this problem. I didn't discard this line because I want doable function more generalized.
            if (num > max) return false;
            else if (acc + num <= max) acc += num;
            else {
                --cuts;
                acc = num;
                if (cuts < 0) return false;
            }
        }
        return true;
    }
    
public:
    int splitArray(vector<int>& nums, int m) {
        long long left = 0, right = 0;
        for (num : nums) {
            left = max(left, (long long)num);
            right += num;
        }
        
        while (left < right) {
            long long mid = left + (right - left) / 2;
            if (doable(nums, m - 1, mid)) right = mid;
            else left = mid + 1;
        }
        return left;
    }
};


Smallest Positive Missing


class Solution
{
    public:
    //Function to find the smallest positive number missing from the array.
    int missingNumber(int arr[], int n) 
    {
        // Create a boolean array of size n+1 and initialize all entries as false
        bool* present = new bool[n + 1];
        for (int i = 0; i <= n; i++)
            present[i] = false;

        // Mark the entries as true if the corresponding index is present in the array
        for (int i = 0; i < n; i++)
            if (arr[i] > 0 && arr[i] <= n)
                present[arr[i]] = true;

        // Find the first index which is false
        int ans = 1;
        while (ans <= n && present[ans])
            ans++;

        delete[] present;
        return ans;
    }
};
