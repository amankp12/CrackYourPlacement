462. Minimum Moves to Equal Array Elements II


class Solution {
public:
    int minMoves2(vector<int>& nums) {
        int n = nums.size(), steps = 0;
        sort(nums.begin(), nums.end());
        int median = nums[n/2]; // Finding median
        for(int i=0; i<n; i++){
            steps += abs(nums[i] - median); //Adding absolute difference
        }
        return steps;
    }
};


67. Add Binary


class Solution {
public:
    string addBinary(string a, string b) {
       string res;
       int i = a.length() - 1;
       int j = b.length() - 1;
       int carry = 0;
       while( i >= 0 || j >= 0){
           int sum = carry;
           if(i >= 0) sum += a[i--] - '0';
           if(j >= 0) sum += b[j--] - '0';
           carry = sum > 1 ? 1 : 0;
           res += to_string(sum % 2);
       }
       if(carry) res += to_string(carry);
       reverse(res.begin() , res.end());
       return res;
    }
};


628. Maximum Product of Three Numbers


class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        sort(nums.begin() , nums.end());
        int n = nums.size();
        return max((nums[n - 1] * nums[n - 2] * nums[n - 3]) , (nums[0] * nums[1] * nums[n - 1]));
    }
};


168. Excel Sheet Column Title


class Solution {
public:
    string convertToTitle(int columnNumber) {
        string ans;

        while(columnNumber != 0){
            columnNumber--;
            int current = columnNumber % 26;
            columnNumber = columnNumber/26;
            ans.push_back(current + 65);
        }
        reverse(ans.begin() , ans.end());
        return ans;
    }
};


Product array puzzle


class Solution{
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums, int n) {
        vector<long long> ans(n);

        ans[n - 1] = nums[n - 1];

        for (int i = n - 2; i >= 0; i--){
            ans[i] = ans[i + 1] * nums[i];
        }

        long long prefix = 1;
        for (int i = 0; i < n - 1; i++){
            ans[i] = ans[i + 1] * prefix;
            prefix *= nums[i];
        }

        ans[n - 1] = prefix;

        return ans;       
    }
};
