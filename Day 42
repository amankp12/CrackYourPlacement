75. Sort Colors


class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        int count0 = 0;
        int count1 = 0;
        int count2 = 0;
        
        for(int i = 0; i < n; i++){
            if(nums[i] == 0) count0++;
            else if(nums[i] == 1) count1++;
            else count2++;
        }
        
        for(int i = 0; i < count0; i++){
            nums[i] = 0;
        }
        
        for(int i = count0; i < count0+count1; i++){
            nums[i] = 1;
        }
        
        for(int i = count0+count1; i < n; i++){
            nums[i] = 2;
        }
    }
};


424. Longest Repeating Character Replacement


class Solution {
public:
    int characterReplacement(string s, int k) {
        vector<int> counts(26, 0);
        int start = 0;
        int maxCharCount = 0;
        int n = s.length();
        int result = 0;
        for(int end = 0; end < n; end++){
            counts[s[end]-'A']++;
            if(maxCharCount < counts[s[end]-'A']){
                maxCharCount = counts[s[end]-'A'];
            }
            while(end-start-maxCharCount+1 > k){
                counts[s[start]-'A']--;
                start++;
                for(int i = 0; i < 26; i++){
                    if(maxCharCount < counts[i]){
                        maxCharCount = counts[i];
                    }
                }
            }
            result = max(result, end-start+1);
        }
        return result;
    }
};


1610. Maximum Number of Visible Points


#define PI 3.14159265
#define MARGIN 1e-9

class Solution {
public:
    double get_angle(int x_diff, int y_diff) {
        return atan2(y_diff, x_diff) * 180 / PI;
    }
    int visiblePoints(vector<vector<int>>& points, int angle, vector<int>& location) {
        int i, j, n = points.size(), common = 0;
        vector<double> vals;
        for(i=0; i<n; i++) {
            int x = points[i][0] - location[0];
            int y = points[i][1] - location[1];
            if(x == 0 && y == 0) {
                common++;
            }
            else {
                double A = get_angle(x, y);
                if(A < 0) A += 360;
                vals.emplace_back(A);
            }
        }

        sort(vals.begin(), vals.end());
        vector<double> a = vals;
        a.insert(a.end(), vals.begin(), vals.end());
        for(i=vals.size(); i<a.size(); i++)
            a[i] += 360;
        int ret = 0;
        for(i=0, j=0; i<a.size(); i++) {
            while(j < a.size() && (a[j]-a[i]<=angle + MARGIN))
                  j++;
            ret = max(ret, j - i);
        }
        return ret + common;
    }
};
