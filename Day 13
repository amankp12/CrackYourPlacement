Permute two arrays such that sum of every pair is greater or equal to K


// C++ program to check whether permutation of two
// arrays satisfy the condition a[i] + b[i] >= k.
#include <bits/stdc++.h>
using namespace std;

// Check whether any permutation exists which
// satisfy the condition.
bool isPossible(int a[], int b[], int n, int k)
{
    // Sort the array a[] in increasing order.
    sort(a, a + n);

    // Sort the array b[] in decreasing order.
    sort(b, b + n, greater<int>());

    // Checking condition on each index.
    for (int i = 0; i < n; i++)
        if (a[i] + b[i] < k)
            return false;

    return true;
}

// Driven Program
int main()
{
    int a[] = { 2, 1, 3 };
    int b[] = { 7, 8, 9 };
    int k = 10;
    int n = sizeof(a) / sizeof(a[0]);

    isPossible(a, b, n, k) ? cout << "Yes" : cout << "No";
    return 0;
}


Ceiling in a sorted array


// C++ implementation of above approach
#include <bits/stdc++.h>
using namespace std;

/* Function to get index of ceiling of x in arr[low..high] */
int ceilSearch(int arr[], int low, int high, int x) 
{ 
	
	int i; 
	
	/* If x is smaller than or equal to first element, 
		then return the first element */
	if(x <= arr[low]) 
		return low; 
	
	/* Otherwise, linearly search for ceil value */
	for(i = low; i < high; i++) 
	{ 
		if(arr[i] == x) 
		return i; 
	
		/* if x lies between arr[i] and arr[i+1] including 
		arr[i+1], then return arr[i+1] */
		if(arr[i] < x && arr[i+1] >= x) 
		return i+1; 
	}	 
	
	/* If we reach here then x is greater than the last element 
		of the array, return -1 in this case */
	return -1; 
} 


/* Driver code*/
int main() 
{ 
	int arr[] = {1, 2, 8, 10, 10, 12, 19}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	int x = 3; 
	int index = ceilSearch(arr, 0, n-1, x); 
	if(index == -1) 
		cout << "Ceiling of " << x << " doesn't exist in array "; 
	else
		cout << "ceiling of " << x << " is " << arr[index]; 
	
	return 0; 
}


Find Pair Given Difference


class Solution {
  public:
    int findPair(int n, int x, vector<int> &arr) {
        sort(arr.begin(), arr.end());
        int i = 0, j = 1;
        while (i < n && j < n) 
        {
            if (i != j && arr[j] - arr[i] == x) 
            {
                return 1;
            } 
            else if (arr[j] - arr[i] < x) 
            {
                j++;
            } 
            else 
            {
                i++;
            }
        }
        return -1;
       
        // code here
    }
};


Permutations in array


bool isPossible(long long a[], long long b[], int n, long long k){
        sort(a,a+n);
        sort(b,b+n);
        reverse(b,b+n);
        for(int i=0; i<n; i++){
                    if(a[i]+b[i]<k) return false;
            }
            return true;
    }

Check if reversing a sub array make the array sorted


// C++ program to check whether reversing a 
// sub array make the array sorted or not 
#include<bits/stdc++.h> 
using namespace std; 

// Return true, if reversing the subarray will 
// sort the array, else return false. 
bool checkReverse(int arr[], int n) 
{ 
	// Copying the array. 
	int temp[n]; 
	for (int i = 0; i < n; i++) 
		temp[i] = arr[i]; 

	// Sort the copied array. 
	sort(temp, temp + n); 

	// Finding the first mismatch. 
	int front; 
	for (front = 0; front < n; front++) 
		if (temp[front] != arr[front]) 
			break; 

	// Finding the last mismatch. 
	int back; 
	for (back = n - 1; back >= 0; back--) 
		if (temp[back] != arr[back]) 
			break; 

	// If whole array is sorted 
	if (front >= back) 
		return true; 

	// Checking subarray is decreasing or not. 
	do
	{ 
		front++; 
		if (arr[front - 1] < arr[front]) 
			return false; 
	} while (front != back); 

	return true; 
} 

// Driver Program 
int main() 
{ 
	int arr[] = { 1, 2, 5, 4, 3 }; 
	int n = sizeof(arr)/sizeof(arr[0]); 

	checkReverse(arr, n)? (cout << "Yes" << endl): 
						(cout << "No" << endl); 
	return 0; 
} 



Radix Sort


// C++ implementation of Radix Sort

#include <iostream>

using namespace std;

// A utility function to get maximum
// value in arr[]
int getMax(int arr[], int n)
{
    int mx = arr[0];
    for (int i = 1; i < n; i++)
        if (arr[i] > mx)
            mx = arr[i];
    return mx;
}

// A function to do counting sort of arr[]
// according to the digit
// represented by exp.
void countSort(int arr[], int n, int exp)
{

    // Output array
    int output[n];
    int i, count[10] = { 0 };

    // Store count of occurrences
    // in count[]
    for (i = 0; i < n; i++)
        count[(arr[i] / exp) % 10]++;

    // Change count[i] so that count[i]
    // now contains actual position
    // of this digit in output[]
    for (i = 1; i < 10; i++)
        count[i] += count[i - 1];

    // Build the output array
    for (i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    // Copy the output array to arr[],
    // so that arr[] now contains sorted
    // numbers according to current digit
    for (i = 0; i < n; i++)
        arr[i] = output[i];
}

// The main function to that sorts arr[]
// of size n using Radix Sort
void radixsort(int arr[], int n)
{

    // Find the maximum number to
    // know number of digits
    int m = getMax(arr, n);

    // Do counting sort for every digit.
    // Note that instead of passing digit
    // number, exp is passed. exp is 10^i
    // where i is current digit number
    for (int exp = 1; m / exp > 0; exp *= 10)
        countSort(arr, n, exp);
}

// A utility function to print an array
void print(int arr[], int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
}

// Driver Code
int main(){
    int arr[] = { 170, 45, 75, 90, 802, 24, 2, 66 };
    int n = sizeof(arr) / sizeof(arr[0]);

    // Function Call
    radixsort(arr, n);
    print(arr, n);
    return 0;
}
