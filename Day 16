Sort a linked list of 0s, 1s and 2s

// C++ Program to sort a linked list of 0s, 1s or 2s

#include <bits/stdc++.h>
using namespace std;

// A linked list node
class Node {
public:
    int data;
    Node* next;

    // Constructor to initialize a new node with data
    Node(int new_data) {
        data = new_data;
        next = nullptr;
    }
};

// Function to sort a linked list of 0s, 1s and 2s
void sortList(Node* head) {
      
    // Initialize count of '0', '1' and '2' as 0
    int cnt[3] = { 0, 0, 0 };
    Node* ptr = head;

    // Traverse and count total number of '0', '1' and '2'
    // cnt[0] will store total number of '0's
    // cnt[1] will store total number of '1's
    // cnt[2] will store total number of '2's
    while (ptr != NULL) {
        cnt[ptr->data] += 1;
        ptr = ptr->next;
    }

    int idx = 0;
    ptr = head;
    
      // Fill first cnt[0] nodes with value 0
      // Fill next cnt[1] nodes with value 1
       // Fill remaining cnt[2] nodes with value 2
    while (ptr != nullptr) {
          
        if (cnt[idx] == 0)
            idx += 1;
        else {
            ptr->data = idx;
            cnt[idx] -= 1;
            ptr = ptr->next;
        }
    }
}

// This function prints the contents 
// of the linked list starting from the head
void printList(Node* node) {
    while (node != nullptr) {
        cout << " " << node->data;
        node = node->next;
    }
      cout << "\n";
}

// Driver code
int main() {
  
    // Create a hard-coded linked list:
    // 1 -> 1 -> 2 -> 1 -> 0 -> NULLÂ 
    Node* head = new Node(1);
    head->next = new Node(1);
    head->next->next = new Node(2);
    head->next->next->next = new Node(1);
    head->next->next->next->next = new Node(0);

    cout << "Linked List before Sorting:";
    printList(head);

      // Function to sort the linked list
    sortList(head);

    cout << "Linked List after Sorting:";
    printList(head);

    return 0;
}


203. Remove Linked List Elements


class Solution {
public:
    /*
		Approach: 1
        Solving the problem using two pointers: previous and current.
        Time: 28 ms
	 */
    ListNode* removeElements(ListNode* head, int val) {
        if(head==nullptr) return head;
        while(head!=nullptr && head->val==val){
            head = head->next;
        }
        ListNode* curr = head;
        ListNode* prev = nullptr;
        while(curr!=nullptr){
            if(curr->val==val){
                prev->next = curr->next;
                curr = curr->next;
            }
            else{
                prev = curr;
                curr = curr->next;        
            }
        }
        return head;
    }
    
    /*
		Approach: 2
        Solving the problem using a single pointer: current.
        Time: 20 ms
    */
    ListNode* removeElements(ListNode* head, int val) {
        if(head==nullptr) return head;
		// This is for the case when a linked list is like this: 
		// 1->1->2->null , val = 1
		// 1->1->1->null , val = 1
        while(head!=nullptr && head->val==val){
            head = head->next;
        }
        ListNode* curr = head;
        while(curr!=nullptr  && curr->next!=nullptr){
            if(curr->next->val==val){
                curr->next = curr->next->next;
				// After doing the above step, I am not updating "curr" because of these type of test cases:
				// 1->2->3->6->6->6->5->null  val = 6
            }
            else
                curr = curr->next;
        }
        return head;
    }
};



21. Merge Two Sorted Lists



class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode *head = new ListNode(0);
        ListNode *curr = head;

        while(list1 != NULL && list2 != NULL){
            if(list1 -> val <= list2 -> val){
                curr -> next = list1;
                list1 = list1 -> next;
            }
            else{
                curr -> next = list2;
                list2 = list2 -> next;
            }
            curr = curr -> next;
        }
        if(list1 != NULL){ // list2 khatam
            curr -> next = list1;
        }
        if(list2 != NULL){ // list1 khatam
            curr -> next = list2;
        }
        return head -> next;
    }
};
