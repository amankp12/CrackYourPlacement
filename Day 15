876. Middle of the Linked List


class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode *slow = head;
        ListNode *fast = head;
        while(fast != NULL && fast -> next != NULL){
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        return slow;
    }
};


141. Linked List Cycle


class Solution {
public:
    bool hasCycle(ListNode *head){
        if(head == NULL)
            return false;
        ListNode * slow = head;
        ListNode * fast = head;

        while(fast != NULL && fast->next != NULL){
            slow = slow -> next;
            fast = fast -> next -> next;
            
            if(slow == fast)
                return true;
        }
        return false;
    }
};


1290. Convert Binary Number in a Linked List to Integer


class Solution {
public:
    int getDecimalValue(ListNode* head) {
        string num;
        while(head!=NULL){
            num+=to_string(head->val);
            head=head->next;
        }
        int res=0,pv=1;
        for(int i=num.size()-1;i>=0;i--){
            res+=pv*(stoi(num.substr(i,1)));
            pv*=2;
        }
        return res;
    }
};


83. Remove Duplicates from Sorted List


class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode* cur = head;
        while(cur) {
        	while(cur->next && cur->val == cur->next->val) {
                
        		cur->next = cur->next->next;
        	}
        	cur = cur->next;
        }
        return head;
    }
};



Sort a linked list of 0s, 1s and 2s


// C++ Program to sort a linked list of 0s, 1s or 2s

#include <bits/stdc++.h>
using namespace std;

// A linked list node
class Node {
public:
    int data;
    Node* next;

    // Constructor to initialize a new node with data
    Node(int new_data) {
        data = new_data;
        next = nullptr;
    }
};

// Function to sort a linked list of 0s, 1s and 2s
void sortList(Node* head) {
      
    // Initialize count of '0', '1' and '2' as 0
    int cnt[3] = { 0, 0, 0 };
    Node* ptr = head;

    // Traverse and count total number of '0', '1' and '2'
    // cnt[0] will store total number of '0's
    // cnt[1] will store total number of '1's
    // cnt[2] will store total number of '2's
    while (ptr != NULL) {
        cnt[ptr->data] += 1;
        ptr = ptr->next;
    }

    int idx = 0;
    ptr = head;
    
      // Fill first cnt[0] nodes with value 0
      // Fill next cnt[1] nodes with value 1
       // Fill remaining cnt[2] nodes with value 2
    while (ptr != nullptr) {
          
        if (cnt[idx] == 0)
            idx += 1;
        else {
            ptr->data = idx;
            cnt[idx] -= 1;
            ptr = ptr->next;
        }
    }
}

// This function prints the contents 
// of the linked list starting from the head
void printList(Node* node) {
    while (node != nullptr) {
        cout << " " << node->data;
        node = node->next;
    }
      cout << "\n";
}

// Driver code
int main() {
  
    // Create a hard-coded linked list:
    // 1 -> 1 -> 2 -> 1 -> 0 -> NULLÂ 
    Node* head = new Node(1);
    head->next = new Node(1);
    head->next->next = new Node(2);
    head->next->next->next = new Node(1);
    head->next->next->next->next = new Node(0);

    cout << "Linked List before Sorting:";
    printList(head);

      // Function to sort the linked list
    sortList(head);

    cout << "Linked List after Sorting:";
    printList(head);
    return 0;
}


203. Remove Linked List Elements


class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
    ListNode** tmp = &head;
    while(*tmp){
        if((*tmp)->val == val) *tmp = (*tmp)->next;
        else tmp = &((*tmp)->next);
    }
    return head;
    }
};
